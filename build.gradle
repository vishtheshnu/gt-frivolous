buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
    id 'net.neoforged.moddev.legacyforge' version '2.0.91'
    id 'com.diffplug.spotless' version '7.0.2'
}

sourceSets {
    main.resources {
        srcDir 'src/generated/resources'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'GTCEu Maven'
        url = 'https://maven.gtceu.com'
        content {
            includeGroup 'com.gregtechceu.gtceu'
        }
    }
    maven {
        name 'FirstDarkDev'
        url "https://maven.firstdark.dev/snapshots/"
    }
    maven { // Registrate
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.tterrag.registrate")
        }
    }
    maven {
        // Patchouli, JEI
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Curse Forge File
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // EMI
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
    maven {
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }

}

version = mod_version
group = maven_group
base { archivesName = archives_base_name }
java { sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17 }

legacyForge {
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.mapping_version
        minecraftVersion = project.minecraft_version
    }

    runs {
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
        client {
            client()
            sourceSet = sourceSets.main
            programArguments.addAll('--refresh-dependencies')
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
        }
        server {
            server()
            sourceSet = sourceSets.main
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
            programArguments.addAll('--nogui', '--world', 'world-extra')
        }
        data {
            data()
            sourceSet = sourceSets.main
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll('--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath())
            programArguments.addAll('--existing-mod', 'gtceu')
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}
jar {
    manifest.attributes([
            "MixinConfigs": "examplemod.mixins.json"
    ])
}

apply from: "$rootDir/gradle/scripts/spotless.gradle"

dependencies {
    compileOnly("org.jetbrains:annotations:26.0.1")

    // Mixin
    annotationProcessor('org.spongepowered:mixin:0.8.5:processor')

    // JEI, EMI, Jade
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    modRuntimeOnly("dev.emi:emi-forge:${emi_version}+${minecraft_version}")
    modRuntimeOnly("curse.maven:jade-324717:5390389")

    // GregTech and dependencies
    modImplementation("com.gregtechceu.gtceu:gtceu-${minecraft_version}:${gtceu_version}:slim") { transitive = false }
    modImplementation("com.lowdragmc.ldlib:ldlib-forge-${minecraft_version}:${ldlib_version}") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")
    modImplementation("dev.toma.configuration:configuration-forge-${minecraft_version}:${configuration_version}")

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

// See com.example.examplemod.mixin.DummyMixin for information about mixins
mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

tasks.named('processResources', ProcessResources).configure {
    var properties = [
            "mod_license": mod_license,
            "mod_id": mod_id,
            "version": version,
            "mod_name": mod_name,
            "mod_url": mod_url,
            "mod_author": mod_author,
            "forge_version": forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version": minecraft_version,
            "gtceu_version": gtceu_version,
    ]
    inputs.properties(properties)

    filesMatching("META-INF/mods.toml") {
        expand properties + [project: project]
    }
}

tasks.named('jar', Jar).configure { finalizedBy 'reobfJar' }
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release.set(17)
    options.compilerArgs << "-Aquiet=true" // Suppress mixin notes
}
